/*
 * Copyright 2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * $Header:$
 */
package org.apache.ti.pageflow;



/**
 * Constants related to Page Flow.
 */
public interface PageFlowConstants {

    /**
     * The name of the special action in a user-defined {@link PageFlowController} (.jpf) that is
     * processed when the URI for the .jpf is accessed.
     */
    public static final String BEGIN_ACTION_NAME = "begin";

    /**
     * The extension used for hitting a {@link PageFlowController} through its URI.
     */
    public static final String PAGEFLOW_EXTENSION = ".jpf";

    /**
     * The extension for Struts action URIs used with page flows.
     */
    public static final String ACTION_EXTENSION = ".do";   // TODO: will need to read this from the Servlet mapping

    /**
     * The filename prefix for Struts module configuration files generated from page flow source files.
     */
    public static final String PAGEFLOW_MODULE_CONFIG_PREFIX = "jpf-struts-config";

    /**
     * The file extensioni for Struts configuration files generated by the Page Flow compiler.
     */
    public static final String PAGEFLOW_MODULE_CONFIG_EXTENSION = ".xml";

    /**
     * The default webapp-relative directory for Struts module configuration files generated by the Page Flow compiler.
     */
    public static final String PAGEFLOW_MODULE_CONFIG_GEN_DIR = "_pageflow";

    /**
     * The name of an automatically-generated forward that can be used from <i>any</i> Page Flow action, in situations
     * where the framework can handle the response itself.  Currently, this happens when a nested page flow returns
     * after being shown in a popup window.  In the calling page flow, the handler for the return action would return
     * something like <code>new forward("_auto")</code>, and the framework would write out the correct javascript to
     * close the popup window.
     */
    public static final String AUTO_VIEW_RENDER_FORWARD_NAME = "_auto";

    /**
     * The prefix for a request parameter that will override the action that would normally be derived from the
     * request path.
     */
    public static final String ACTION_OVERRIDE_PARAM_PREFIX = "actionOverride:";
}
