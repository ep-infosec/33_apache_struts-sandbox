/*
 * Copyright 2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * $Header:$
 */
package org.apache.ti.compiler.internal.genmodel;

import org.apache.ti.compiler.internal.CompilerUtils;
import org.apache.ti.compiler.internal.JpfLanguageConstants;
import org.apache.ti.compiler.internal.model.XWorkExceptionHandlerContainer;
import org.apache.ti.compiler.internal.model.XWorkExceptionHandlerModel;
import org.apache.ti.compiler.internal.model.XWorkResultModel;
import org.apache.ti.compiler.internal.typesystem.declaration.AnnotationInstance;
import org.apache.ti.compiler.internal.typesystem.declaration.ClassDeclaration;
import org.apache.ti.compiler.internal.typesystem.declaration.MethodDeclaration;
import org.apache.ti.compiler.internal.typesystem.declaration.TypeDeclaration;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;


public class GenXWorkExceptionHandlerModel
        extends XWorkExceptionHandlerModel
        implements JpfLanguageConstants {

    public GenXWorkExceptionHandlerModel(GenXWorkModuleConfigModel parentApp, AnnotationInstance annotation,
                                         ClassDeclaration jclass, String parentAnnotationName) {
        super(parentApp);

        setType(CompilerUtils.getLoadableName(CompilerUtils.getDeclaredType(annotation, TYPE_ATTR, true)));
        setMessage(CompilerUtils.getString(annotation, MESSAGE_ATTR, true));
        setMessageKey(CompilerUtils.getString(annotation, MESSAGE_KEY_ATTR, true));
        String path = CompilerUtils.getString(annotation, PATH_ATTR, true);
        String methodName = CompilerUtils.getString(annotation, METHOD_ATTR, true);

        // "Generated by" comment
        // TODO I18N
        StringBuffer comment = new StringBuffer("Generated from ");
        comment.append('@').append(ANNOTATION_INTERFACE_PREFIX);
        comment.append(parentAnnotationName);
        comment.append("/@").append(ANNOTATION_INTERFACE_PREFIX);
        comment.append(annotation.getAnnotationType().getAnnotationTypeDeclaration().getSimpleName());
        comment.append(" (type=");
        comment.append(getType());
        comment.append(") ");

        //
        // Now get the forwards (@Jpf.Forward) from the handler method, and add them as global or local
        // forwards, as appropriate.
        //
        if (methodName != null) {
            setHandlerMethod(methodName);
            MethodDeclaration method = CompilerUtils.getClassMethod(jclass, methodName, EXCEPTION_HANDLER_TAG_NAME);
            AnnotationInstance exHandlerAnnotation = CompilerUtils.getAnnotation(method, EXCEPTION_HANDLER_TAG_NAME);
            GenXWorkResultModel.addForwards(exHandlerAnnotation, this, jclass, parentApp, null);

            // Infer a "success" forward if there wasn't one specified.
            XWorkResultModel successFwd = getForward("success");
            if (successFwd == null) {
                String defaultFileExt = parentApp.getDefaultFileExtension();
                successFwd = new XWorkResultModel("success", methodName + defaultFileExt, parentApp);
                successFwd.setComment("(implicit)");
                addForward(successFwd);
            }

            //
            // Also, if the exception-handler was marked "read-only", note this on the  tag.
            //
            Boolean readOnly = CompilerUtils.getBoolean(exHandlerAnnotation, READONLY_ATTR, true);
            if (readOnly == null) {
                readOnly = Boolean.valueOf(parentApp.getFlowControllerInfo().getMergedControllerAnnotation().isReadOnly());
            }
            setReadonly(readOnly.booleanValue());

            comment.append("and method " + methodName);
        } else {
            assert path != null;

            //
            // If this annotation came from a base class, and if inheritLocalPaths is true on the Controller
            // annotation, then make the path relative to the base class module.
            //
            TypeDeclaration containingType = annotation.getContainingType();
            if (! CompilerUtils.typesAreEqual(jclass, containingType)
                    && parentApp.getFlowControllerInfo().getMergedControllerAnnotation().isInheritLocalPaths()) {
                // TODO: when we no longer support Struts 1.1, we can simply use the 'module' property
                // to make this forward relative to the base class module.
                path = CompilerUtils.getPathRelativeToPackage(path, containingType.getPackage());
                setInheritedPath(true);
            }

            setPath(path);
        }

        setComment(comment.toString());
    }

    static void addCatches(AnnotationInstance annotation, XWorkExceptionHandlerContainer container, ClassDeclaration jclass,
                           GenXWorkModuleConfigModel strutsApp) {
        List catches = CompilerUtils.getAnnotationArray(annotation, CATCHES_ATTR, true);
        addCatches(catches, container, jclass, strutsApp,
                annotation.getAnnotationType().getAnnotationTypeDeclaration().getSimpleName());
    }

    static void addCatches(Collection catches, XWorkExceptionHandlerContainer container, ClassDeclaration jclass,
                           GenXWorkModuleConfigModel strutsApp, String parentAnnotationName) {
        if (catches != null) {
            for (Iterator ii = catches.iterator(); ii.hasNext();) {
                AnnotationInstance i = (AnnotationInstance) ii.next();
                container.addException(new GenXWorkExceptionHandlerModel(strutsApp, i, jclass, parentAnnotationName));
            }
        }
    }
}
